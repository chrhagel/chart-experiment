{"ast":null,"code":"var _jsxFileName = \"/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js\";\nimport React from \"react\";\nimport { Stage, Layer, Rect, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\nimport { number } from \"prop-types\";\n\nclass Barchart extends React.Component {\n  render() {\n    const data = {\n      bar01: {\n        value: 50,\n        label: \"AAA\"\n      },\n      bar02: {\n        value: 10,\n        label: \"BBB\"\n      },\n      bar03: {\n        value: 90,\n        label: \"CCC\"\n      },\n      bar04: {\n        value: 120,\n        label: \"DDD\"\n      }\n    };\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    }\n\n    const maxHeight = maxHeightCalc();\n    const xPos = this.props.width / Object.keys(data).length;\n    const barWidth = this.props.width / (Object.keys(data).length + (Object.keys(data).length - 1));\n    return React.createElement(Stage, {\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, Object.keys(data).map((key, index) => React.createElement(ColoredRect, {\n      key: key,\n      maxH: maxHeight,\n      width: barWidth,\n      xpos: xPos * index,\n      hval: data[key].value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Barchart;","map":{"version":3,"sources":["/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js"],"names":["React","Stage","Layer","Rect","Text","Konva","ColoredRect","number","Barchart","Component","render","data","bar01","value","label","bar02","bar03","bar04","maxHeightCalc","h","Object","keys","map","key","maxHeight","xPos","props","width","length","barWidth","height","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,IAA7B,QAAyC,aAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,MAAT,QAAuB,YAAvB;;AAEA,MAAMC,QAAN,SAAuBR,KAAK,CAACS,SAA7B,CAAuC;AACrCC,EAAAA,MAAM,GAAG;AACP,UAAMC,IAAI,GAAG;AACXC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,KAAK,EAAE;AAApB,OADI;AAEXC,MAAAA,KAAK,EAAE;AAAEF,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAFI;AAGXE,MAAAA,KAAK,EAAE;AAAEH,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAHI;AAIXG,MAAAA,KAAK,EAAE;AAAEJ,QAAAA,KAAK,EAAE,GAAT;AAAcC,QAAAA,KAAK,EAAE;AAArB;AAJI,KAAb;;AAOA,aAASI,aAAT,GAAyB;AACvB,UAAIC,CAAC,GAAG,CAAR;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAYV,IAAZ,EAAkBW,GAAlB,CAAsBC,GAAG,IAAI;AAC3B,YAAIZ,IAAI,CAACY,GAAD,CAAJ,CAAUV,KAAV,GAAkBM,CAAtB,EAAyB;AACvBA,UAAAA,CAAC,GAAGR,IAAI,CAACY,GAAD,CAAJ,CAAUV,KAAd;AACD;AACF,OAJD;AAKA,aAAOM,CAAP;AACD;;AACD,UAAMK,SAAS,GAAGN,aAAa,EAA/B;AACA,UAAMO,IAAI,GAAG,KAAKC,KAAL,CAAWC,KAAX,GAAmBP,MAAM,CAACC,IAAP,CAAYV,IAAZ,EAAkBiB,MAAlD;AACA,UAAMC,QAAQ,GAAG,KAAKH,KAAL,CAAWC,KAAX,IAAoBP,MAAM,CAACC,IAAP,CAAYV,IAAZ,EAAkBiB,MAAlB,IAA4BR,MAAM,CAACC,IAAP,CAAYV,IAAZ,EAAkBiB,MAAlB,GAA2B,CAAvD,CAApB,CAAjB;AAEA,WACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,KAAKF,KAAL,CAAWC,KAAzB;AAAgC,MAAA,MAAM,EAAE,KAAKD,KAAL,CAAWI,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGV,MAAM,CAACC,IAAP,CAAYV,IAAZ,EAAkBW,GAAlB,CAAsB,CAACC,GAAD,EAAMQ,KAAN,KACrB,oBAAC,WAAD;AACE,MAAA,GAAG,EAAER,GADP;AAEE,MAAA,IAAI,EAAEC,SAFR;AAGE,MAAA,KAAK,EAAEK,QAHT;AAIE,MAAA,IAAI,EAAEJ,IAAI,GAAGM,KAJf;AAKE,MAAA,IAAI,EAAEpB,IAAI,CAACY,GAAD,CAAJ,CAAUV,KALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CADF,CADF;AAeD;;AArCoC;;AAwCvC,eAAeL,QAAf","sourcesContent":["import React from \"react\";\nimport { Stage, Layer, Rect, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\nimport { number } from \"prop-types\";\n\nclass Barchart extends React.Component {\n  render() {\n    const data = {\n      bar01: { value: 50, label: \"AAA\" },\n      bar02: { value: 10, label: \"BBB\" },\n      bar03: { value: 90, label: \"CCC\" },\n      bar04: { value: 120, label: \"DDD\" }\n    };\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    }\n    const maxHeight = maxHeightCalc();\n    const xPos = this.props.width / Object.keys(data).length;\n    const barWidth = this.props.width / (Object.keys(data).length + (Object.keys(data).length - 1));\n  \n    return (\n      <Stage width={this.props.width} height={this.props.height}>\n        <Layer>\n          {Object.keys(data).map((key, index) => (\n            <ColoredRect\n              key={key}\n              maxH={maxHeight}\n              width={barWidth}\n              xpos={xPos * index}\n              hval={data[key].value}\n            />\n          ))}\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default Barchart;\n"]},"metadata":{},"sourceType":"module"}