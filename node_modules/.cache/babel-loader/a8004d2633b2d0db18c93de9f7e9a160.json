{"ast":null,"code":"var _jsxFileName = \"/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js\";\nimport React from \"react\";\nimport { Stage, Layer, Line } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  render() {\n    const data = this.props.data;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    } // highest bar should fill up the barchart height. All bars should be scaled\n\n\n    const scale = this.props.height / maxHeightCalc(); // x posiiton of the bar\n\n    const xPos = this.props.width / Object.keys(data).length; // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n\n    const barWidth = 2 * (this.props.width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n    return React.createElement(Stage, {\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, Object.keys(data).map((key, index) => React.createElement(ColoredRect, {\n      key: key,\n      xPos: xPos * index,\n      yPos: this.props.height - scale * data[key].value,\n      height: scale * data[key].value,\n      width: barWidth,\n      value: data[key].value,\n      chartHeight: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    })), React.createElement(Line, {\n      points: [0, this.props.height, this.props.width, this.props.height],\n      stroke: \"red\",\n      strokeWidth: 5,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Barchart;","map":{"version":3,"sources":["/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js"],"names":["React","Stage","Layer","Line","Konva","ColoredRect","Barchart","Component","render","data","props","maxHeightCalc","h","Object","keys","map","key","value","scale","height","xPos","width","length","barWidth","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,IAAvB,QAAmC,aAAnC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,QAAN,SAAuBN,KAAK,CAACO,SAA7B,CAAuC;AACrCC,EAAAA,MAAM,GAAG;AACP,UAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWD,IAAxB;;AAEA,aAASE,aAAT,GAAyB;AACvB,UAAIC,CAAC,GAAG,CAAR;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkBM,GAAlB,CAAsBC,GAAG,IAAI;AAC3B,YAAIP,IAAI,CAACO,GAAD,CAAJ,CAAUC,KAAV,GAAkBL,CAAtB,EAAyB;AACvBA,UAAAA,CAAC,GAAGH,IAAI,CAACO,GAAD,CAAJ,CAAUC,KAAd;AACD;AACF,OAJD;AAKA,aAAOL,CAAP;AACD,KAXM,CAYP;;;AACA,UAAMM,KAAK,GAAG,KAAKR,KAAL,CAAWS,MAAX,GAAoBR,aAAa,EAA/C,CAbO,CAcP;;AACA,UAAMS,IAAI,GAAG,KAAKV,KAAL,CAAWW,KAAX,GAAmBR,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkBa,MAAlD,CAfO,CAgBP;AACA;;AACA,UAAMC,QAAQ,GACZ,KACC,KAAKb,KAAL,CAAWW,KAAX,IACER,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkBa,MAAlB,GAA2B,CAA3B,IAAgCT,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkBa,MAAlB,GAA2B,CAA3D,CADF,CADD,CADF;AAKA,WACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,KAAKZ,KAAL,CAAWW,KAAzB;AAAgC,MAAA,MAAM,EAAE,KAAKX,KAAL,CAAWS,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGN,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkBM,GAAlB,CAAsB,CAACC,GAAD,EAAMQ,KAAN,KACrB,oBAAC,WAAD;AACE,MAAA,GAAG,EAAER,GADP;AAEE,MAAA,IAAI,EAAEI,IAAI,GAAGI,KAFf;AAGE,MAAA,IAAI,EAAE,KAAKd,KAAL,CAAWS,MAAX,GAAoBD,KAAK,GAAGT,IAAI,CAACO,GAAD,CAAJ,CAAUC,KAH9C;AAIE,MAAA,MAAM,EAAEC,KAAK,GAAGT,IAAI,CAACO,GAAD,CAAJ,CAAUC,KAJ5B;AAKE,MAAA,KAAK,EAAEM,QALT;AAME,MAAA,KAAK,EAAEd,IAAI,CAACO,GAAD,CAAJ,CAAUC,KANnB;AAOE,MAAA,WAAW,EAAE,KAAKP,KAAL,CAAWS,MAP1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,EAYE,oBAAC,IAAD;AACE,MAAA,MAAM,EAAE,CAAC,CAAD,EAAI,KAAKT,KAAL,CAAWS,MAAf,EAAuB,KAAKT,KAAL,CAAWW,KAAlC,EAAyC,KAAKX,KAAL,CAAWS,MAApD,CADV;AAEE,MAAA,MAAM,EAAE,KAFV;AAGE,MAAA,WAAW,EAAE,CAHf;AAIE,MAAA,OAAO,EAAE,CAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CADF,CADF;AAuBD;;AA/CoC;;AAkDvC,eAAeb,QAAf","sourcesContent":["import React from \"react\";\nimport { Stage, Layer, Line } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  render() {\n    const data = this.props.data;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    }\n    // highest bar should fill up the barchart height. All bars should be scaled\n    const scale = this.props.height / maxHeightCalc();\n    // x posiiton of the bar\n    const xPos = this.props.width / Object.keys(data).length;\n    // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n    const barWidth =\n      2 *\n      (this.props.width /\n        (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n\n    return (\n      <Stage width={this.props.width} height={this.props.height}>\n        <Layer>\n          {Object.keys(data).map((key, index) => (\n            <ColoredRect\n              key={key}\n              xPos={xPos * index}\n              yPos={this.props.height - scale * data[key].value}\n              height={scale * data[key].value}\n              width={barWidth}\n              value={data[key].value}\n              chartHeight={this.props.height}\n            />\n          ))}\n          <Line\n            points={[0, this.props.height, this.props.width, this.props.height]}\n            stroke={\"red\"}\n            strokeWidth={5}\n            tension={1}\n          />\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default Barchart;\n"]},"metadata":{},"sourceType":"module"}