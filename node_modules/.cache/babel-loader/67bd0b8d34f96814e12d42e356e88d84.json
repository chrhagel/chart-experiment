{"ast":null,"code":"var _jsxFileName = \"/Users/christian/Documents/git/chart-experiment/src/components/Scatterplot.js\";\nimport React from \"react\";\nimport { Stage, Layer, Rect, Line, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport Plotmark from \"./Plotmark\";\n\nclass Scatterplot extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderBackground = (height, width, leftPadding) => {\n      return React.createElement(Rect, {\n        x: 0,\n        y: 0,\n        width: width + leftPadding,\n        height: height,\n        fill: this.props.theme.bgcol,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      });\n    };\n\n    this.renderYAxisTickMarks = (height, hScale, markdiameter, topPadding, bottomPadding, leftPadding) => {\n      if (this.props.theme.showYTicks) {\n        var arr = [];\n        const numYMarks = 11;\n        const drawingHeight = height - bottomPadding - topPadding;\n        const yAxisTickDistance = drawingHeight / numYMarks + 1; // so we dont start at the x axis.\n\n        for (var i = 0; i < numYMarks; i++) {\n          const yPostition = drawingHeight - yAxisTickDistance * i * hScale + parseInt(markdiameter / 2);\n          arr.push(React.createElement(Line, {\n            key: \"mark\" + i,\n            points: [leftPadding, yPostition, this.props.width + 3, yPostition],\n            stroke: this.props.theme.col,\n            strokeWidth: 1,\n            tension: 1,\n            dash: [4],\n            onClick: this.handleLineClick // NOT WORKING\n            ,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 32\n            },\n            __self: this\n          }));\n        }\n\n        return arr;\n      } else return null;\n    };\n\n    this.renderYAxis = (leftPadding, height, topPadding, yDomainMax) => {\n      if (this.props.theme.showYAxis) {\n        const numYMarks = 11; // so we have a baseline for 0 and a tick for each 10.\n\n        const domainTicks = parseInt(yDomainMax / (numYMarks - 1));\n        const yAxisTickDistance = height / numYMarks + 1; // so we dont start at the x axis.\n\n        var arr = [];\n\n        for (var i = 0; i < numYMarks; i++) {\n          arr.push(React.createElement(Text, {\n            key: \"text\" + i,\n            text: domainTicks * (numYMarks - (i + 1)),\n            x: 28,\n            y: yAxisTickDistance * i - 5 + topPadding,\n            fontSize: 12,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          }));\n        }\n\n        return arr;\n      } else return null;\n    };\n\n    this.maxHeightCalc = () => {\n      const data = this.props.data;\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].rating > h) {\n          h = data[key].rating;\n        }\n      });\n      return h + 10; //To give some margin between the highest rating and the top of the chart.\n    };\n\n    this.maxWidthCalc = () => {\n      const data = this.props.data;\n      let w = 0;\n      Object.keys(data).map(key => {\n        if (data[key].years > w) {\n          w = data[key].years;\n        }\n      });\n      return w;\n    };\n  }\n\n  render() {\n    const data = this.props.data;\n    const leftPadding = 50;\n    const topPadding = 10;\n    const bottomPadding = 30;\n    const width = this.props.width - leftPadding;\n    const height = this.props.height - leftPadding;\n    const markdiameter = 5; // highest bar should fill up the barchart height. All bars should be scaled\n\n    const hScale = height / this.maxHeightCalc();\n    const wScale = (width - leftPadding) / this.maxWidthCalc();\n    return React.createElement(Stage, {\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.renderBackground(height, width, leftPadding), this.renderYAxisTickMarks(height, hScale, markdiameter, topPadding, bottomPadding, leftPadding), this.renderYAxis(leftPadding, height - bottomPadding, topPadding, this.maxHeightCalc()), Object.keys(data).map((key, index) => React.createElement(Plotmark, {\n      key: key,\n      xPos: leftPadding + data[key].years * wScale // yPos={(height - (topPadding  + 0 )) - data[key].rating * (hScale)}\n      ,\n      yPos: height - bottomPadding + topPadding - data[key].rating * hScale,\n      radius: markdiameter,\n      color: this.props.theme.barcols[0],\n      value: data[key].name + \"--- Rating: \" + data[key].rating + \" and \" + \"Years: \" + data[key].years,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })), React.createElement(Text, {\n      text: \"Rating\",\n      x: 18,\n      y: height / 2 - 20,\n      fontSize: 15,\n      rotation: 90,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(Text, {\n      text: \"Years\",\n      x: width / 2 - 20,\n      y: height - 17,\n      fontSize: 15,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Scatterplot;","map":{"version":3,"sources":["/Users/christian/Documents/git/chart-experiment/src/components/Scatterplot.js"],"names":["React","Stage","Layer","Rect","Line","Text","Konva","Plotmark","Scatterplot","Component","renderBackground","height","width","leftPadding","props","theme","bgcol","renderYAxisTickMarks","hScale","markdiameter","topPadding","bottomPadding","showYTicks","arr","numYMarks","drawingHeight","yAxisTickDistance","i","yPostition","parseInt","push","col","handleLineClick","renderYAxis","yDomainMax","showYAxis","domainTicks","maxHeightCalc","data","h","Object","keys","map","key","rating","maxWidthCalc","w","years","render","wScale","index","barcols","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Stage, Layer, Rect, Line, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport Plotmark from \"./Plotmark\";\n\nclass Scatterplot extends React.Component {\n  renderBackground = (height, width, leftPadding) => {\n    return (\n      <Rect\n        x={0}\n        y={0}\n        width={width + leftPadding}\n        height={height}\n        fill={this.props.theme.bgcol}\n      />\n    );\n  };\n\n  renderYAxisTickMarks = (height, hScale, markdiameter, topPadding, bottomPadding, leftPadding) => {\n    if (this.props.theme.showYTicks) {\n      var arr = [];\n\n      const numYMarks = 11;\n      \n      \n      const drawingHeight = height - bottomPadding - topPadding; \n      const yAxisTickDistance = drawingHeight / numYMarks + 1; // so we dont start at the x axis.\n\n      for (var i = 0; i < numYMarks; i++) {\n        const yPostition = drawingHeight - yAxisTickDistance * i * hScale + parseInt(markdiameter/2) ;\n        arr.push(\n          <Line\n            key={\"mark\" + i}\n            points={[leftPadding, yPostition, this.props.width + 3, yPostition]}\n            stroke={this.props.theme.col}\n            strokeWidth={1}\n            tension={1}\n            dash={[4]}\n            onClick={this.handleLineClick} // NOT WORKING\n          />\n        );\n      }\n      return arr;\n    } else return null;\n  };\n\n  // yDomainMax = highest value.\n  renderYAxis = (leftPadding, height, topPadding, yDomainMax) => {\n    if (this.props.theme.showYAxis) {\n      const numYMarks = 11; // so we have a baseline for 0 and a tick for each 10.\n      const domainTicks = parseInt(yDomainMax / (numYMarks - 1));\n      const yAxisTickDistance = height / numYMarks + 1; // so we dont start at the x axis.\n      var arr = [];\n      for (var i = 0; i < numYMarks; i++) {\n        arr.push(\n          <Text\n            key={\"text\" + i}\n            text={domainTicks * (numYMarks - (i + 1))}\n            x={28}\n            y={yAxisTickDistance * i - 5 + topPadding}\n            fontSize={12}\n          />\n        );\n      }\n      return arr;\n    } else return null;\n  };\n\n  maxHeightCalc = () => {\n    const data = this.props.data;\n    let h = 0;\n    Object.keys(data).map(key => {\n      if (data[key].rating > h) {\n        h = data[key].rating;\n      }\n    });\n    return h + 10; //To give some margin between the highest rating and the top of the chart.\n  };\n\n  maxWidthCalc = () => {\n    const data = this.props.data;\n    let w = 0;\n    Object.keys(data).map(key => {\n      if (data[key].years > w) {\n        w = data[key].years;\n      }\n    });\n    return w;\n  };\n\n  render() {\n    const data = this.props.data;\n    const leftPadding = 50;\n    const topPadding = 10;\n    const bottomPadding = 30;\n\n    const width = this.props.width - leftPadding;\n    const height = this.props.height - leftPadding;\n\n    const markdiameter = 5;\n\n    // highest bar should fill up the barchart height. All bars should be scaled\n    const hScale = height / this.maxHeightCalc();\n    const wScale = (width - leftPadding) / this.maxWidthCalc();\n\n    return (\n      <Stage width={this.props.width} height={this.props.height}>\n        <Layer>\n          {this.renderBackground(height, width, leftPadding)}\n          {this.renderYAxisTickMarks(height, hScale, markdiameter, topPadding, bottomPadding, leftPadding)}\n\n          {this.renderYAxis(\n            leftPadding,\n            height - bottomPadding,\n            topPadding,\n            this.maxHeightCalc()\n          )}\n\n          {/* plot marks */}\n          {Object.keys(data).map((key, index) => (\n            <Plotmark\n              key={key}\n              xPos={leftPadding + data[key].years * wScale}\n              // yPos={(height - (topPadding  + 0 )) - data[key].rating * (hScale)}\n              yPos={height - bottomPadding + topPadding - data[key].rating * hScale}\n              radius={markdiameter}\n              color={this.props.theme.barcols[0]}\n              value={\n                data[key].name +\n                \"--- Rating: \" +\n                data[key].rating +\n                \" and \" +\n                \"Years: \" +\n                data[key].years\n              }\n            />\n          ))}\n\n          <Text\n            text={\"Rating\"}\n            x={18}\n            y={height / 2 - 20}\n            fontSize={15}\n            rotation={90}\n          />\n\n          <Text\n            text={\"Years\"}\n            x={width / 2 - 20}\n            y={height - 17}\n            fontSize={15}\n          />\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default Scatterplot;\n"]},"metadata":{},"sourceType":"module"}