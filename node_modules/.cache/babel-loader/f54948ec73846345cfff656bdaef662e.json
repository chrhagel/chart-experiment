{"ast":null,"code":"var _jsxFileName = \"/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js\";\nimport React from \"react\";\nimport { Stage, Layer, Line } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderSpur = () => {\n      var arr = [];\n\n      for (var i = 0; i < 5; i++) {\n        arr.push(React.createElement(Line, {\n          points: [10 * i, 10 * i, 100 / i, 100 / i],\n          stroke: \"red\",\n          strokeWidth: 1,\n          tension: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11\n          },\n          __self: this\n        }));\n        return arr;\n      }\n    };\n  }\n\n  render() {\n    const data = this.props.data;\n    const gutter = 20;\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter; // Super hacky but I cant get this to work any other way\n    // maybe refs can help us out?\n    // https://reactjs.org/docs/refs-and-the-dom.html\n    // https://github.com/konvajs/react-konva\n\n    const yAxisTickDistance = height / 11;\n    const yAxisTicks = {\n      1: 1,\n      2: 2,\n      3: 3,\n      4: 4,\n      5: 5,\n      6: 6,\n      7: 7,\n      8: 8,\n      9: 9,\n      10: 10\n    };\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    } // highest bar should fill up the barchart height. All bars should be scaled\n\n\n    const scale = height / maxHeightCalc(); // x posiiton of the bar\n\n    const xPos = width / Object.keys(data).length; // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n\n    const barWidth = 2 * (width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n    return React.createElement(Stage, {\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, Object.keys(yAxisTicks).map(key => React.createElement(Line, {\n      key: key,\n      points: [gutter - 3, yAxisTickDistance * key, gutter + 3, yAxisTickDistance * key],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })), Object.keys(data).map((key, index) => React.createElement(ColoredRect, {\n      key: key,\n      xPos: xPos * index + gutter,\n      yPos: height - scale * data[key].value,\n      height: scale * data[key].value,\n      width: barWidth,\n      value: data[key].value,\n      chartHeight: height // used for labels\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })), React.createElement(Line // horisontal x axis\n    , {\n      points: [gutter, height, this.props.width, height],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(Line // vertical Y axis\n    // [x1, y1, x2, y2, x3, y3]\n    , {\n      points: [gutter, 0, gutter, height],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), this.renderSpur()));\n  }\n\n}\n\nexport default Barchart;","map":{"version":3,"sources":["/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js"],"names":["React","Stage","Layer","Line","Konva","ColoredRect","Barchart","Component","renderSpur","arr","i","push","render","data","props","gutter","width","height","yAxisTickDistance","yAxisTicks","maxHeightCalc","h","Object","keys","map","key","value","scale","xPos","length","barWidth","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Stage, Layer, Line } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  renderSpur = () => {\n    var arr = [];\n    for (var i = 0; i < 5; i++) {\n      arr.push(\n        <Line\n          points={[10*i, 10*i, 100/i, 100/i]}\n          stroke={\"red\"}\n          strokeWidth={1}\n          tension={1}\n        />\n      );\n      return arr;\n    }\n  };\n\n  render() {\n    const data = this.props.data;\n    const gutter = 20;\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter;\n\n    // Super hacky but I cant get this to work any other way\n    // maybe refs can help us out?\n    // https://reactjs.org/docs/refs-and-the-dom.html\n    // https://github.com/konvajs/react-konva\n    const yAxisTickDistance = height / 11;\n    const yAxisTicks = {\n      1: 1,\n      2: 2,\n      3: 3,\n      4: 4,\n      5: 5,\n      6: 6,\n      7: 7,\n      8: 8,\n      9: 9,\n      10: 10\n    };\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    }\n\n    // highest bar should fill up the barchart height. All bars should be scaled\n    const scale = height / maxHeightCalc();\n    // x posiiton of the bar\n    const xPos = width / Object.keys(data).length;\n    // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n    const barWidth =\n      2 *\n      (width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n\n    return (\n      <Stage width={this.props.width} height={this.props.height}>\n        <Layer>\n          {/* Inserting y axis tick marks */}\n          {Object.keys(yAxisTicks).map(key => (\n            <Line\n              key={key}\n              points={[\n                gutter - 3,\n                yAxisTickDistance * key,\n                gutter + 3,\n                yAxisTickDistance * key\n              ]}\n              stroke={\"black\"}\n              strokeWidth={1}\n              tension={1}\n            />\n          ))}\n\n          {/* Bars */}\n          {Object.keys(data).map((key, index) => (\n            <ColoredRect\n              key={key}\n              xPos={xPos * index + gutter}\n              yPos={height - scale * data[key].value}\n              height={scale * data[key].value}\n              width={barWidth}\n              value={data[key].value}\n              chartHeight={height} // used for labels\n            />\n          ))}\n\n          <Line\n            // horisontal x axis\n            points={[gutter, height, this.props.width, height]}\n            stroke={\"black\"}\n            strokeWidth={1}\n            tension={1}\n          />\n\n          <Line\n            // vertical Y axis\n            // [x1, y1, x2, y2, x3, y3]\n            points={[gutter, 0, gutter, height]}\n            stroke={\"black\"}\n            strokeWidth={1}\n            tension={1}\n          />\n\n            {this.renderSpur()}\n\n\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default Barchart;\n"]},"metadata":{},"sourceType":"module"}