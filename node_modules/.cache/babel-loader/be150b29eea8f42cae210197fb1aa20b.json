{"ast":null,"code":"var _jsxFileName = \"/Users/christian/Documents/git/chart-experiment/src/components/Scatterplot.js\";\nimport React from \"react\";\nimport { Stage, Layer, Rect, Line, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport Plotmark from \"./Plotmark\";\n\nclass Scatterplot extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderBackground = (height, width, gutter) => {\n      return React.createElement(Rect, {\n        x: 0,\n        y: 0,\n        width: width + gutter,\n        height: height,\n        fill: this.props.theme.bgcol,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      });\n    };\n\n    this.renderYAxisTickMarks = (gutter, height) => {\n      if (this.props.theme.showYTicks) {\n        const numYMarks = 10;\n        const yAxisTickDistance = height / numYMarks + 1; // so we dont start at the x axis.\n\n        var arr = [];\n\n        for (var i = 0; i < numYMarks; i++) {\n          arr.push(React.createElement(Line, {\n            key: \"mark\" + i,\n            points: [gutter - 3, yAxisTickDistance * i, this.props.width + 3, yAxisTickDistance * i],\n            stroke: this.props.theme.col,\n            strokeWidth: 1,\n            tension: 1,\n            dash: [4],\n            onClick: this.handleLineClick // NOT WORKING\n            ,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26\n            },\n            __self: this\n          }));\n        }\n\n        return arr;\n      } else return null;\n    };\n  }\n\n  render() {\n    const data = this.props.data;\n    let gutter = 0;\n\n    if (this.props.theme.showYTicks) {\n      gutter = 10;\n    }\n\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].rating > h) {\n          h = data[key].rating;\n        }\n      });\n      return h + 10;\n    }\n\n    function maxWidthCalc() {\n      let w = 0;\n      Object.keys(data).map(key => {\n        if (data[key].years > w) {\n          w = data[key].years;\n        }\n      });\n      return w;\n    } // highest bar should fill up the barchart height. All bars should be scaled\n\n\n    const hScale = height / maxHeightCalc();\n    const wScale = width / maxWidthCalc();\n    return React.createElement(Stage, {\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, this.renderBackground(height, width, gutter), this.renderYAxisTickMarks(gutter, height), Object.keys(data).map((key, index) => React.createElement(Plotmark, {\n      key: key,\n      xPos: data[key].years * wScale,\n      yPos: height - data[key].rating * hScale,\n      radius: 5,\n      color: this.props.theme.barcols[0],\n      value: data[key].name + '--- Rating: ' + data[key].rating + ' and ' + 'Years: ' + data[key].years,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })), React.createElement(Text, {\n      text: \"Years\",\n      x: 20 // y={height/2}\n      ,\n      verticalAlign: 'middle',\n      fontSize: 15,\n      rotation: 90,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Scatterplot;","map":{"version":3,"sources":["/Users/christian/Documents/git/chart-experiment/src/components/Scatterplot.js"],"names":["React","Stage","Layer","Rect","Line","Text","Konva","Plotmark","Scatterplot","Component","renderBackground","height","width","gutter","props","theme","bgcol","renderYAxisTickMarks","showYTicks","numYMarks","yAxisTickDistance","arr","i","push","col","handleLineClick","render","data","maxHeightCalc","h","Object","keys","map","key","rating","maxWidthCalc","w","years","hScale","wScale","index","barcols","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Stage, Layer, Rect, Line, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport Plotmark from \"./Plotmark\";\n\nclass Scatterplot extends React.Component {\n  renderBackground = (height, width, gutter) => {\n    return (\n      <Rect\n        x={0}\n        y={0}\n        width={width + gutter}\n        height={height}\n        fill={this.props.theme.bgcol}\n      />\n    );\n  };\n\n  renderYAxisTickMarks = (gutter, height) => {\n    if (this.props.theme.showYTicks) {\n      const numYMarks = 10;\n      const yAxisTickDistance = height / numYMarks + 1; // so we dont start at the x axis.\n      var arr = [];\n      for (var i = 0; i < numYMarks; i++) {\n        arr.push(\n          <Line\n            key={\"mark\" + i}\n            points={[\n              gutter - 3,\n              yAxisTickDistance * i,\n              this.props.width + 3,\n              yAxisTickDistance * i\n            ]}\n            stroke={this.props.theme.col}\n            strokeWidth={1}\n            tension={1}\n            dash={[4]}\n            onClick={this.handleLineClick} // NOT WORKING\n          />\n        );\n      }\n      return arr;\n    } else return null;\n  };\n\n  render() {\n    const data = this.props.data;\n    let gutter = 0;\n    if (this.props.theme.showYTicks) {\n      gutter = 10;\n    }\n\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].rating > h) {\n          h = data[key].rating;\n        }\n      });\n      return h + 10;\n    }\n\n    function maxWidthCalc() {\n      let w = 0;\n      Object.keys(data).map(key => {\n        if (data[key].years > w) {\n          w = data[key].years;\n        }\n      });\n      return w;\n    }\n\n    // highest bar should fill up the barchart height. All bars should be scaled\n    const hScale = height / maxHeightCalc();\n    const wScale = width / maxWidthCalc();\n\n    return (\n      <Stage width={this.props.width} height={this.props.height}>\n        <Layer>\n          {this.renderBackground(height, width, gutter)}\n          {this.renderYAxisTickMarks(gutter, height)}\n          {/* plot marks */}\n          {Object.keys(data).map((key, index) => (\n            <Plotmark\n              key={key}\n              xPos={data[key].years * wScale}\n              yPos={height - data[key].rating * hScale}\n              radius={5}\n              color={this.props.theme.barcols[0]}\n              value={data[key].name + '--- Rating: ' + data[key].rating + ' and ' + 'Years: ' + data[key].years}\n            />\n          ))}\n\n            <Text \n            text={\"Years\"}\n            x={20}\n            // y={height/2}\n            verticalAlign={'middle'}\n            fontSize={15}\n            rotation={90}\n            />\n\n\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default Scatterplot;\n"]},"metadata":{},"sourceType":"module"}