{"ast":null,"code":"var _jsxFileName = \"/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js\";\nimport React from \"react\";\nimport { Stage, Layer, Rect, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  render() {\n    const data = {\n      bar01: {\n        value: 50,\n        label: \"AAA\"\n      },\n      bar02: {\n        value: 10,\n        label: \"BBB\"\n      },\n      bar03: {\n        value: 90,\n        label: \"CCC\"\n      },\n      bar04: {\n        value: 120,\n        label: \"DDD\"\n      }\n    };\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    }\n\n    const maxH = maxHeightCalc();\n    const wVal = 100 / Object.keys(data).length;\n    return React.createElement(Stage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, Object.keys(data).map((key, index) => React.createElement(ColoredRect, {\n      key: key,\n      maxH: maxH,\n      xpos: wVal * index,\n      hval: data[key].value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Barchart;","map":{"version":3,"sources":["/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js"],"names":["React","Stage","Layer","Rect","Text","Konva","ColoredRect","Barchart","Component","render","data","bar01","value","label","bar02","bar03","bar04","maxHeightCalc","h","Object","keys","map","key","maxH","wVal","length","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,IAA7B,QAAyC,aAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,QAAN,SAAuBP,KAAK,CAACQ,SAA7B,CAAuC;AACrCC,EAAAA,MAAM,GAAG;AACP,UAAMC,IAAI,GAAG;AACXC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,KAAK,EAAE;AAApB,OADI;AAEXC,MAAAA,KAAK,EAAE;AAAEF,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAFI;AAGXE,MAAAA,KAAK,EAAE;AAAEH,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAHI;AAIXG,MAAAA,KAAK,EAAE;AAAEJ,QAAAA,KAAK,EAAE,GAAT;AAAcC,QAAAA,KAAK,EAAE;AAArB;AAJI,KAAb;;AAOA,aAASI,aAAT,GAAyB;AACvB,UAAIC,CAAC,GAAG,CAAR;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAYV,IAAZ,EAAkBW,GAAlB,CAAsBC,GAAG,IAAI;AAC3B,YAAIZ,IAAI,CAACY,GAAD,CAAJ,CAAUV,KAAV,GAAkBM,CAAtB,EAAyB;AACvBA,UAAAA,CAAC,GAAGR,IAAI,CAACY,GAAD,CAAJ,CAAUV,KAAd;AACD;AACF,OAJD;AAKA,aAAOM,CAAP;AACD;;AACD,UAAMK,IAAI,GAAGN,aAAa,EAA1B;AAEA,UAAMO,IAAI,GAAG,MAAML,MAAM,CAACC,IAAP,CAAYV,IAAZ,EAAkBe,MAArC;AAEA,WACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGN,MAAM,CAACC,IAAP,CAAYV,IAAZ,EAAkBW,GAAlB,CAAsB,CAACC,GAAD,EAAMI,KAAN,KACrB,oBAAC,WAAD;AACE,MAAA,GAAG,EAAEJ,GADP;AAEE,MAAA,IAAI,EAAEC,IAFR;AAGE,MAAA,IAAI,EAAEC,IAAI,GAAGE,KAHf;AAIE,MAAA,IAAI,EAAEhB,IAAI,CAACY,GAAD,CAAJ,CAAUV,KAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CADF,CADF;AAcD;;AApCoC;;AAuCvC,eAAeL,QAAf","sourcesContent":["import React from \"react\";\nimport { Stage, Layer, Rect, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  render() {\n    const data = {\n      bar01: { value: 50, label: \"AAA\" },\n      bar02: { value: 10, label: \"BBB\" },\n      bar03: { value: 90, label: \"CCC\" },\n      bar04: { value: 120, label: \"DDD\" }\n    };\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    }\n    const maxH = maxHeightCalc();\n\n    const wVal = 100 / Object.keys(data).length;\n\n    return (\n      <Stage >\n        <Layer>\n          {Object.keys(data).map((key, index) => (\n            <ColoredRect\n              key={key}\n              maxH={maxH}\n              xpos={wVal * index}\n              hval={data[key].value}\n            />\n          ))}\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default Barchart;\n"]},"metadata":{},"sourceType":"module"}