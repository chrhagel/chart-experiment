{"ast":null,"code":"var _jsxFileName = \"/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js\";\nimport React from \"react\";\nimport { Stage, Layer, Rect, Line } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderBackground = (height, width, gutter) => {\n      return React.createElement(Rect, {\n        x: 0,\n        y: 0,\n        width: width + gutter,\n        height: height,\n        fill: this.props.theme.bgcol,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      });\n    };\n\n    this.renderYAxisTickMarks = (gutter, height) => {\n      if (this.props.theme.showYTicks) {\n        const numYMarks = 10;\n        const yAxisTickDistance = height / numYMarks + 1; // so we dont start at the x axis.\n\n        var arr = [];\n\n        for (var i = 0; i < numYMarks; i++) {\n          arr.push(React.createElement(Line, {\n            key: \"mark\" + i,\n            points: [gutter - 3, yAxisTickDistance * i, this.props.width + 3, yAxisTickDistance * i],\n            stroke: this.props.theme.col,\n            strokeWidth: 1,\n            tension: 1,\n            dash: [4],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26\n            },\n            __self: this\n          }));\n        }\n\n        return arr;\n      } else return null;\n    };\n  }\n\n  render() {\n    const data = this.props.data;\n\n    if (this.props.theme.showYTicks) {\n      const gutter = 10;\n    } else {\n      const gutter = 0;\n    }\n\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    } // highest bar should fill up the barchart height. All bars should be scaled\n\n\n    const scale = height / maxHeightCalc(); // x posiiton of the bar\n\n    const xPos = width / Object.keys(data).length; // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n\n    const barWidth = 2 * (width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n    return React.createElement(Stage, {\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.renderBackground(height, width, gutter), this.renderYAxisTickMarks(gutter, height), Object.keys(data).map((key, index) => React.createElement(ColoredRect, {\n      key: key,\n      xPos: xPos * index + gutter,\n      yPos: height - scale * data[key].value,\n      height: scale * data[key].value,\n      width: barWidth,\n      value: data[key].value,\n      chartHeight: height // used for labels\n      ,\n      color: this.props.theme.barcols[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })), React.createElement(Line // horisontal x axis\n    , {\n      points: [gutter, height, this.props.width, height],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(Line // vertical Y axis\n    // [x1, y1, x2, y2, x3, y3]\n    , {\n      points: [gutter, 0, gutter, height],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Barchart;","map":{"version":3,"sources":["/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js"],"names":["React","Stage","Layer","Rect","Line","Konva","ColoredRect","Barchart","Component","renderBackground","height","width","gutter","props","theme","bgcol","renderYAxisTickMarks","showYTicks","numYMarks","yAxisTickDistance","arr","i","push","col","render","data","maxHeightCalc","h","Object","keys","map","key","value","scale","xPos","length","barWidth","index","barcols"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Stage, Layer, Rect, Line } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  renderBackground = (height, width, gutter) => {\n    return (\n      <Rect\n        x={0}\n        y={0}\n        width={width + gutter}\n        height={height}\n        fill={this.props.theme.bgcol}\n      />\n    );\n  };\n\n  renderYAxisTickMarks = (gutter, height) => {\n    if (this.props.theme.showYTicks) {\n      const numYMarks = 10;\n      const yAxisTickDistance = height / numYMarks + 1; // so we dont start at the x axis.\n      var arr = [];\n      for (var i = 0; i < numYMarks; i++) {\n        arr.push(\n          <Line\n            key={\"mark\" + i}\n            points={[\n              gutter - 3,\n              yAxisTickDistance * i,\n              this.props.width + 3,\n              yAxisTickDistance * i\n            ]}\n            stroke={this.props.theme.col}\n            strokeWidth={1}\n            tension={1}\n            dash={[4]}\n          />\n        );\n      }\n      return arr;\n    } else return null;\n  };\n\n  render() {\n    const data = this.props.data;\n    if (this.props.theme.showYTicks){\n      const gutter = 10;\n    } else {const gutter = 0;}\n\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    }\n\n    // highest bar should fill up the barchart height. All bars should be scaled\n    const scale = height / maxHeightCalc();\n    // x posiiton of the bar\n    const xPos = width / Object.keys(data).length;\n    // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n    const barWidth =\n      2 *\n      (width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n\n    return (\n      <Stage width={this.props.width} height={this.props.height}>\n        <Layer>\n          {this.renderBackground(height, width, gutter)}\n\n          {this.renderYAxisTickMarks(gutter, height)}\n\n          {/* Bars */}\n          {Object.keys(data).map((key, index) => (\n            <ColoredRect\n              key={key}\n              xPos={xPos * index + gutter}\n              yPos={height - scale * data[key].value}\n              height={scale * data[key].value}\n              width={barWidth}\n              value={data[key].value}\n              chartHeight={height} // used for labels\n              color={this.props.theme.barcols[0]}\n            />\n          ))}\n\n          <Line\n            // horisontal x axis\n            points={[gutter, height, this.props.width, height]}\n            stroke={\"black\"}\n            strokeWidth={1}\n            tension={1}\n          />\n\n          <Line\n            // vertical Y axis\n            // [x1, y1, x2, y2, x3, y3]\n            points={[gutter, 0, gutter, height]}\n            stroke={\"black\"}\n            strokeWidth={1}\n            tension={1}\n          />\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default Barchart;\n"]},"metadata":{},"sourceType":"module"}