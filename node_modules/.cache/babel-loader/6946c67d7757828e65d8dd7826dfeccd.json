{"ast":null,"code":"var _jsxFileName = \"/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js\";\nimport React from \"react\";\nimport { Stage, Layer, Line, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  render() {\n    const data = this.props.data;\n    const gutter = 20;\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter; // Super hacky but I cant get this to work any other way\n\n    const yAxisTickDistance = height / 11;\n    const yAxisTicks = {\n      1: 1,\n      2: 2,\n      3: 3,\n      4: 4,\n      5: 5,\n      6: 6,\n      7: 7,\n      8: 8,\n      9: 9,\n      10: 10\n    };\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    } // highest bar should fill up the barchart height. All bars should be scaled\n\n\n    const scale = height / maxHeightCalc(); // x posiiton of the bar\n\n    const xPos = width / Object.keys(data).length; // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n\n    const barWidth = 2 * (width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n    return React.createElement(Stage, {\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, Object.keys(data).map((key, index) => React.createElement(ColoredRect, {\n      key: key,\n      xPos: xPos * index + gutter,\n      yPos: height - scale * data[key].value,\n      height: scale * data[key].value,\n      width: barWidth,\n      value: data[key].value,\n      chartHeight: height // used for labels\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })), React.createElement(Line // horisontal x axis\n    , {\n      points: [gutter, height, this.props.width, height],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(Line // vertical Y axis\n    // [x1, y1, x2, y2, x3, y3]\n    , {\n      points: [gutter, 0, gutter, height],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), Object.keys(yAxisTicks).map(key => React.createElement(Line // horisontal x axis\n    , {\n      key: key,\n      points: [gutter - 2, yAxisTickDistance * key, gutter + 2, yAxisTickDistance * key],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Barchart;","map":{"version":3,"sources":["/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js"],"names":["React","Stage","Layer","Line","Text","Konva","ColoredRect","Barchart","Component","render","data","props","gutter","width","height","yAxisTickDistance","yAxisTicks","maxHeightCalc","h","Object","keys","map","key","value","scale","xPos","length","barWidth","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Stage, Layer, Line, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  render() {\n    const data = this.props.data;\n    const gutter = 20;\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter;\n    \n    // Super hacky but I cant get this to work any other way\n    const yAxisTickDistance = height / 11;\n    const yAxisTicks = {\n      1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8, 9:9, 10:10\n    }\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    }\n\n    // highest bar should fill up the barchart height. All bars should be scaled\n    const scale = height / maxHeightCalc();\n    // x posiiton of the bar\n    const xPos = width / Object.keys(data).length;\n    // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n    const barWidth =\n      2 *\n      (width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n\n    return (\n      <Stage width={this.props.width} height={this.props.height}>\n        <Layer>\n          {Object.keys(data).map((key, index) => (\n            <ColoredRect\n              key={key}\n              xPos={xPos * index + gutter}\n              yPos={height - scale * data[key].value}\n              height={scale * data[key].value}\n              width={barWidth}\n              value={data[key].value}\n              chartHeight={height} // used for labels\n            />\n          ))}\n          <Line\n            // horisontal x axis\n            points={[gutter, height, this.props.width, height]}\n            stroke={\"black\"}\n            strokeWidth={1}\n            tension={1}\n          />\n\n          <Line\n            // vertical Y axis\n            // [x1, y1, x2, y2, x3, y3]\n            points={[gutter, 0, gutter, height]}\n            stroke={\"black\"}\n            strokeWidth={1}\n            tension={1}\n          />\n\n          {/* Inserting y axis tick marks */}\n           {Object.keys(yAxisTicks).map(key => (\n            \n            <Line\n              // horisontal x axis\n              key={key}\n              points={[gutter - 2, yAxisTickDistance * key, gutter + 2, yAxisTickDistance* key]}\n              stroke={\"black\"}\n              strokeWidth={1}\n              tension={1}\n            />\n          ))}\n\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default Barchart;\n"]},"metadata":{},"sourceType":"module"}