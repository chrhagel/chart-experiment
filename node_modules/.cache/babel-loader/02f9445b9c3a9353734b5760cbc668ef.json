{"ast":null,"code":"var _jsxFileName = \"/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js\";\nimport React from \"react\";\nimport { Stage, Layer, Rect, Line } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderBackground = (height, width, gutter) => {\n      return React.createElement(Rect, {\n        x: 0,\n        y: 0,\n        width: width + gutter,\n        height: height,\n        fill: this.props.theme.bgcol,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      });\n    };\n\n    this.renderYAxisTickMarks = (gutter, height) => {\n      const numYMarks = 10;\n      const yAxisTickDistance = height / numYMarks + 1; // so we dont start at the x axis.\n\n      var arr = [];\n\n      for (var i = 0; i < numYMarks; i++) {\n        arr.push(React.createElement(Line, {\n          key: \"mark\" + i,\n          points: [gutter - 3, yAxisTickDistance * i, this.props.width + 3, yAxisTickDistance * i],\n          stroke: this.props.theme.col,\n          strokeWidth: 1,\n          tension: 1,\n          dash: [4],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }));\n      }\n\n      return arr;\n    };\n  }\n\n  render() {\n    const data = this.props.data;\n    const theme = this.props.theme;\n    const showMarks = !this.props.showMarks ? false : true;\n    const gutter = 10;\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    } // highest bar should fill up the barchart height. All bars should be scaled\n\n\n    const scale = height / maxHeightCalc(); // x posiiton of the bar\n\n    const xPos = width / Object.keys(data).length; // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n\n    const barWidth = 2 * (width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n    return React.createElement(Stage, {\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, this.renderBackground(height, width, gutter), this.renderYAxisTickMarks(gutter, height), Object.keys(data).map((key, index) => React.createElement(ColoredRect, {\n      key: key,\n      xPos: xPos * index + gutter,\n      yPos: height - scale * data[key].value,\n      height: scale * data[key].value,\n      width: barWidth,\n      value: data[key].value,\n      chartHeight: height // used for labels\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), React.createElement(Line // horisontal x axis\n    , {\n      points: [gutter, height, this.props.width, height],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(Line // vertical Y axis\n    // [x1, y1, x2, y2, x3, y3]\n    , {\n      points: [gutter, 0, gutter, height],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Barchart;","map":{"version":3,"sources":["/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js"],"names":["React","Stage","Layer","Rect","Line","Konva","ColoredRect","Barchart","Component","renderBackground","height","width","gutter","props","theme","bgcol","renderYAxisTickMarks","numYMarks","yAxisTickDistance","arr","i","push","col","render","data","showMarks","maxHeightCalc","h","Object","keys","map","key","value","scale","xPos","length","barWidth","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Stage, Layer, Rect, Line } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n\n\n  renderBackground = ( height, width, gutter) => {\n    return <Rect x={0} y={0} width={width+gutter} height={height} fill={this.props.theme.bgcol} />;\n  };\n\n  renderYAxisTickMarks = (gutter, height) => {\n    const numYMarks = 10;\n    const yAxisTickDistance = height / numYMarks + 1; // so we dont start at the x axis.\n    var arr = [];\n    for (var i = 0; i < numYMarks; i++) {\n      arr.push(\n        <Line\n          key={\"mark\" + i}\n          points={[\n            gutter - 3,\n            yAxisTickDistance * i,\n            this.props.width + 3,\n            yAxisTickDistance * i\n          ]}\n          stroke={this.props.theme.col}\n          strokeWidth={1}\n          tension={1}\n          dash={[4]}\n        />\n      );\n    }\n    return arr;\n  };\n\n  render() {\n\n    const data = this.props.data;\n    const theme = this.props.theme;\n    \n    const showMarks = !this.props.showMarks ? false : true;\n\n    const gutter = 10;\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    }\n\n    // highest bar should fill up the barchart height. All bars should be scaled\n    const scale = height / maxHeightCalc();\n    // x posiiton of the bar\n    const xPos = width / Object.keys(data).length;\n    // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n    const barWidth =\n      2 *\n      (width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n\n    return (\n      <Stage width={this.props.width} height={this.props.height}>\n        <Layer>\n          {this.renderBackground(height, width, gutter)}\n\n          {this.renderYAxisTickMarks(gutter, height)}\n\n          {/* Bars */}\n          {Object.keys(data).map((key, index) => (\n            <ColoredRect\n              key={key}\n              xPos={xPos * index + gutter}\n              yPos={height - scale * data[key].value}\n              height={scale * data[key].value}\n              width={barWidth}\n              value={data[key].value}\n              chartHeight={height} // used for labels\n            />\n          ))}\n\n          <Line\n            // horisontal x axis\n            points={[gutter, height, this.props.width, height]}\n            stroke={\"black\"}\n            strokeWidth={1}\n            tension={1}\n          />\n\n          <Line\n            // vertical Y axis\n            // [x1, y1, x2, y2, x3, y3]\n            points={[gutter, 0, gutter, height]}\n            stroke={\"black\"}\n            strokeWidth={1}\n            tension={1}\n          />\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default Barchart;\n"]},"metadata":{},"sourceType":"module"}