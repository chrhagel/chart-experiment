{"ast":null,"code":"var _jsxFileName = \"/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js\";\nimport React from \"react\";\nimport { Stage, Layer } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  render() {\n    const data = {\n      bar01: {\n        value: 50,\n        label: \"AAA\"\n      },\n      bar02: {\n        value: 10,\n        label: \"BBB\"\n      },\n      bar03: {\n        value: 90,\n        label: \"CCC\"\n      },\n      bar04: {\n        value: 120,\n        label: \"DDD\"\n      },\n      bar05: {\n        value: 60,\n        label: \"DDD\"\n      },\n      bar06: {\n        value: 80,\n        label: \"DDD\"\n      }\n    };\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    } // highest bar should fill up the barchart height. All bars should be scaled\n\n\n    const scale = this.props.height / maxHeightCalc(); // x posiiton of the bar\n\n    const xPos = this.props.width / Object.keys(data).length; // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n\n    const barWidth = 2 * (this.props.width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n    return React.createElement(Stage, {\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, Object.keys(data).map((key, index) => React.createElement(ColoredRect, {\n      key: key,\n      xPos: xPos * index,\n      yPos: this.props.height - scale * data[key].value,\n      height: scale * data[key].value,\n      width: barWidth,\n      value: data[key].value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Barchart;","map":{"version":3,"sources":["/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js"],"names":["React","Stage","Layer","Konva","ColoredRect","Barchart","Component","render","data","bar01","value","label","bar02","bar03","bar04","bar05","bar06","maxHeightCalc","h","Object","keys","map","key","scale","props","height","xPos","width","length","barWidth","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Stage, Layer } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  render() {\n    const data = {\n      bar01: { value: 50, label: \"AAA\" },\n      bar02: { value: 10, label: \"BBB\" },\n      bar03: { value: 90, label: \"CCC\" },\n      bar04: { value: 120, label: \"DDD\" },\n      bar05: { value: 60, label: \"DDD\" },\n      bar06: { value: 80, label: \"DDD\" }\n    };\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    }\n    // highest bar should fill up the barchart height. All bars should be scaled\n    const scale = this.props.height / maxHeightCalc();\n    // x posiiton of the bar\n    const xPos = this.props.width / Object.keys(data).length;\n    // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n    const barWidth =\n      2 *\n      (this.props.width /\n        (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n\n    return (\n      <Stage width={this.props.width} height={this.props.height}>\n        <Layer>\n          {Object.keys(data).map((key, index) => (\n            <ColoredRect\n              key={key}\n              xPos={xPos * index}\n              yPos={this.props.height - scale * data[key].value}\n              height={scale * data[key].value}\n              width={barWidth}\n              value={data[key].value}\n            />\n          ))}\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default Barchart;\n"]},"metadata":{},"sourceType":"module"}