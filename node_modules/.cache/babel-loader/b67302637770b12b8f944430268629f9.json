{"ast":null,"code":"var _jsxFileName = \"/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js\";\nimport React from \"react\";\nimport { Stage, Layer, Line } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderYAxisTickMarks = (gutter, height) => {\n      const numYMarks = 10;\n      const yAxisTickDistance = height / numYMarks + 1; // so we dont start at the x axis.\n\n      var arr = [];\n\n      for (var i = 0; i < numYMarks; i++) {\n        arr.push(React.createElement(Line, {\n          key: \"mark\" + i,\n          points: [gutter - 3, yAxisTickDistance * i, this.props.width + 3, yAxisTickDistance * i],\n          stroke: \"black\",\n          strokeWidth: 1,\n          tension: 1,\n          dash: [4],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }));\n      }\n\n      return arr;\n    };\n  }\n\n  render() {\n    const data = this.props.data;\n    const gutter = 20;\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    } // highest bar should fill up the barchart height. All bars should be scaled\n\n\n    const scale = height / maxHeightCalc(); // x posiiton of the bar\n\n    const xPos = width / Object.keys(data).length; // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n\n    const barWidth = 2 * (width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n    return React.createElement(Stage, {\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, this.renderYAxisTickMarks(gutter, height), Object.keys(data).map((key, index) => React.createElement(ColoredRect, {\n      key: key,\n      xPos: xPos * index + gutter,\n      yPos: height - scale * data[key].value,\n      height: scale * data[key].value,\n      width: barWidth,\n      value: data[key].value,\n      chartHeight: height // used for labels\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })), React.createElement(Line // horisontal x axis\n    , {\n      points: [gutter, height, this.props.width, height],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(Line // vertical Y axis\n    // [x1, y1, x2, y2, x3, y3]\n    , {\n      points: [gutter, 0, gutter, height],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Barchart;","map":{"version":3,"sources":["/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js"],"names":["React","Stage","Layer","Line","Konva","ColoredRect","Barchart","Component","renderYAxisTickMarks","gutter","height","numYMarks","yAxisTickDistance","arr","i","push","props","width","render","data","maxHeightCalc","h","Object","keys","map","key","value","scale","xPos","length","barWidth","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Stage, Layer, Line } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  // {/* Inserting y axis tick marks */}\n  // {Object.keys(yAxisTicks).map(key => (\n  //   <Line\n  //     key={key}\n  //     points={[\n  //       gutter - 3,\n  //       yAxisTickDistance * key,\n  //       gutter + 3,\n  //       yAxisTickDistance * key\n  //     ]}\n  //     stroke={\"black\"}\n  //     strokeWidth={1}\n  //     tension={1}\n  //   />\n  // ))}\n\n\n  renderYAxisTickMarks = (gutter, height) => {\n    const numYMarks = 10;\n    const yAxisTickDistance = height / numYMarks + 1; // so we dont start at the x axis.\n    var arr = [];\n    for (var i = 0; i < numYMarks; i++) {\n      arr.push(\n        <Line\n          key={\"mark\" + i}\n          points={[\n            gutter - 3,\n            yAxisTickDistance * i,\n            this.props.width +3,\n            yAxisTickDistance * i\n          ]}\n          stroke={\"black\"}\n          strokeWidth={1}\n          tension={1}\n          dash={[4]}\n        />\n      );\n      \n    }\n    return arr;\n  };\n\n  render() {\n    const data = this.props.data;\n    const gutter = 20;\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    }\n\n    // highest bar should fill up the barchart height. All bars should be scaled\n    const scale = height / maxHeightCalc();\n    // x posiiton of the bar\n    const xPos = width / Object.keys(data).length;\n    // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n    const barWidth =\n      2 *\n      (width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n\n    return (\n      <Stage width={this.props.width} height={this.props.height}>\n        <Layer>\n\n          {this.renderYAxisTickMarks(gutter, height)}\n\n          {/* Bars */}\n          {Object.keys(data).map((key, index) => (\n            <ColoredRect\n              key={key}\n              xPos={xPos * index + gutter}\n              yPos={height - scale * data[key].value}\n              height={scale * data[key].value}\n              width={barWidth}\n              value={data[key].value}\n              chartHeight={height} // used for labels\n            />\n          ))}\n\n          <Line\n            // horisontal x axis\n            points={[gutter, height, this.props.width, height]}\n            stroke={\"black\"}\n            strokeWidth={1}\n            tension={1}\n          />\n\n          <Line\n            // vertical Y axis\n            // [x1, y1, x2, y2, x3, y3]\n            points={[gutter, 0, gutter, height]}\n            stroke={\"black\"}\n            strokeWidth={1}\n            tension={1}\n          />\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default Barchart;\n"]},"metadata":{},"sourceType":"module"}