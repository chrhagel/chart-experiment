{"ast":null,"code":"var _jsxFileName = \"/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js\";\nimport React from \"react\";\nimport { Stage, Layer, Line, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderText = gutter => {\n      let yo = null;\n      Object.keys(this.props.data).map(key => {\n        yo += key;\n      });\n      return (// Object.keys(data).map(key => {\n        React.createElement(Line // horisontal x axis\n        , {\n          points: [10, 30, gutter + 10, 30],\n          stroke: \"black\",\n          strokeWidth: 1,\n          tension: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }) // });\n\n      );\n    };\n  }\n\n  render() {\n    const data = this.props.data;\n    const gutter = 20;\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    } // highest bar should fill up the barchart height. All bars should be scaled\n\n\n    const scale = height / maxHeightCalc(); // x posiiton of the bar\n\n    const xPos = width / Object.keys(data).length; // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n\n    const barWidth = 2 * (width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n    return React.createElement(Stage, {\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, Object.keys(data).map((key, index) => React.createElement(ColoredRect, {\n      key: key,\n      xPos: xPos * index + gutter,\n      yPos: height - scale * data[key].value,\n      height: scale * data[key].value,\n      width: barWidth,\n      value: data[key].value,\n      chartHeight: height // used for labels\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })), React.createElement(Line // horisontal x axis\n    , {\n      points: [gutter, height, this.props.width, height],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), this.renderText(gutter), React.createElement(Line // vertical Y axis\n    // [x1, y1, x2, y2, x3, y3]\n    , {\n      points: [gutter, 0, gutter, height],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Barchart;","map":{"version":3,"sources":["/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js"],"names":["React","Stage","Layer","Line","Text","Konva","ColoredRect","Barchart","Component","renderText","gutter","yo","Object","keys","props","data","map","key","render","width","height","maxHeightCalc","h","value","scale","xPos","length","barWidth","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Stage, Layer, Line, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  renderText = gutter => {\n    \n    let yo = null;\n    Object.keys(this.props.data).map(key => {\n      yo += key;\n    });\n\n\n    return (\n      \n      \n      // Object.keys(data).map(key => {\n      <Line\n        // horisontal x axis\n        points={[10, 30, gutter + 10, 30]}\n        stroke={\"black\"}\n        strokeWidth={1}\n        tension={1}\n      />\n   \n    // });\n    )\n  };\n\n  render() {\n    const data = this.props.data;\n    const gutter = 20;\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    }\n\n    // highest bar should fill up the barchart height. All bars should be scaled\n    const scale = height / maxHeightCalc();\n    // x posiiton of the bar\n    const xPos = width / Object.keys(data).length;\n    // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n    const barWidth =\n      2 *\n      (width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n\n    return (\n      <Stage width={this.props.width} height={this.props.height}>\n        <Layer>\n          {Object.keys(data).map((key, index) => (\n            <ColoredRect\n              key={key}\n              xPos={xPos * index + gutter}\n              yPos={height - scale * data[key].value}\n              height={scale * data[key].value}\n              width={barWidth}\n              value={data[key].value}\n              chartHeight={height} // used for labels\n            />\n          ))}\n          <Line\n            // horisontal x axis\n            points={[gutter, height, this.props.width, height]}\n            stroke={\"black\"}\n            strokeWidth={1}\n            tension={1}\n          />\n\n          {this.renderText(gutter)}\n\n          <Line\n            // vertical Y axis\n            // [x1, y1, x2, y2, x3, y3]\n            points={[gutter, 0, gutter, height]}\n            stroke={\"black\"}\n            strokeWidth={1}\n            tension={1}\n          />\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default Barchart;\n"]},"metadata":{},"sourceType":"module"}