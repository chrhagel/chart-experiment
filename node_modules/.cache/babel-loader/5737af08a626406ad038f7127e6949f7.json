{"ast":null,"code":"var _jsxFileName = \"/Users/christian/Documents/git/chart-experiment/src/components/Barchart.js\";\nimport React from \"react\";\nimport { Stage, Layer, Rect, Line, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleLineClick = () => {\n      console.log(\"bob\");\n      alert(\"bob\");\n    };\n\n    this.renderBackground = (height, width, gutter) => {\n      return React.createElement(Rect, {\n        x: 0,\n        y: 0,\n        width: width + gutter,\n        height: height,\n        fill: this.props.theme.bgcol,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      });\n    };\n\n    this.renderYAxisTickMarks = (gutter, height) => {\n      if (this.props.theme.showYTicks) {\n        const numYMarks = 10;\n        const yAxisTickDistance = height / numYMarks + 1; // so we dont start at the x axis.\n\n        var arr = [];\n\n        for (var i = 0; i < numYMarks; i++) {\n          arr.push(React.createElement(Line, {\n            key: \"mark\" + i,\n            points: [gutter - 3, yAxisTickDistance * i, this.props.width + 3, yAxisTickDistance * i],\n            stroke: this.props.theme.col,\n            strokeWidth: 1,\n            tension: 1,\n            dash: [4],\n            onClick: this.handleLineClick // NOT WORKING\n            ,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31\n            },\n            __self: this\n          }));\n        }\n\n        return arr;\n      } else return null;\n    };\n\n    this.firstLetterToUpper = lowerStr => {\n      return lowerStr.charAt(0).toUpperCase() + lowerStr.substring(1);\n    };\n\n    this.maxHeightCalc = () => {\n      const data = this.props.data;\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].rating > h) {\n          h = data[key].rating;\n        }\n      });\n      return h + 10; //To give some margin between the highest rating and the top of the chart.\n    };\n  }\n\n  render() {\n    const data = this.props.data;\n    const leftPadding = 50;\n    const topPadding = 10;\n    const bottomPadding = 20;\n    const width = this.props.width - leftPadding;\n    const height = this.props.height;\n    const drawingHeight = height - topPadding - bottomPadding;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    } // highest bar should fill up the barchart height. All bars should be scaled\n\n\n    const scale = height / maxHeightCalc(); // x posiiton of the bar\n\n    const xPos = width / Object.keys(data).length; // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n\n    const barWidth = 2 * (width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n    return React.createElement(Stage, {\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, this.renderBackground(height, width, leftPadding), this.renderYAxisTickMarks(leftPadding, height), Object.keys(data).map((key, index) => React.createElement(ColoredRect, {\n      key: key,\n      xPos: xPos * index + leftPadding,\n      yPos: height - scale * data[key].value,\n      height: scale * data[key].value,\n      width: barWidth,\n      value: data[key].value,\n      chartHeight: height // used for labels\n      ,\n      color: this.props.theme.barcols[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })), React.createElement(Line // horisontal x axis\n    , {\n      points: [leftPadding, height, this.props.width, height],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(Line // vertical Y axis\n    // [x1, y1, x2, y2, x3, y3]\n    , {\n      points: [leftPadding, 0, leftPadding, height],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(Text, {\n      text: this.firstLetterToUpper(this.props.yAxis),\n      x: 18,\n      y: height / 2 - 20,\n      fontSize: 15,\n      rotation: 90,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(Text, {\n      text: this.firstLetterToUpper(this.props.xAxis),\n      x: (width + leftPadding) / 2 - 20,\n      y: height - 17,\n      fontSize: 15,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Barchart;","map":{"version":3,"sources":["/Users/christian/Documents/git/chart-experiment/src/components/Barchart.js"],"names":["React","Stage","Layer","Rect","Line","Text","Konva","ColoredRect","Barchart","Component","handleLineClick","console","log","alert","renderBackground","height","width","gutter","props","theme","bgcol","renderYAxisTickMarks","showYTicks","numYMarks","yAxisTickDistance","arr","i","push","col","firstLetterToUpper","lowerStr","charAt","toUpperCase","substring","maxHeightCalc","data","h","Object","keys","map","key","rating","render","leftPadding","topPadding","bottomPadding","drawingHeight","value","scale","xPos","length","barWidth","index","barcols","yAxis","xAxis"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Stage, Layer, Rect, Line, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  handleLineClick = () => {\n    console.log(\"bob\");\n    alert(\"bob\");\n  };\n\n  renderBackground = (height, width, gutter) => {\n    return (\n      <Rect\n        x={0}\n        y={0}\n        width={width + gutter}\n        height={height}\n        fill={this.props.theme.bgcol}\n      />\n    );\n  };\n\n  renderYAxisTickMarks = (gutter, height) => {\n    if (this.props.theme.showYTicks) {\n      const numYMarks = 10;\n      const yAxisTickDistance = height / numYMarks + 1; // so we dont start at the x axis.\n      var arr = [];\n      for (var i = 0; i < numYMarks; i++) {\n        arr.push(\n          <Line\n            key={\"mark\" + i}\n            points={[\n              gutter - 3,\n              yAxisTickDistance * i,\n              this.props.width + 3,\n              yAxisTickDistance * i\n            ]}\n            stroke={this.props.theme.col}\n            strokeWidth={1}\n            tension={1}\n            dash={[4]}\n            onClick={this.handleLineClick} // NOT WORKING\n          />\n        );\n      }\n      return arr;\n    } else return null;\n  };\n\n  firstLetterToUpper = lowerStr => {\n    return lowerStr.charAt(0).toUpperCase() + lowerStr.substring(1);\n  };\n\n  maxHeightCalc = () => {\n    const data = this.props.data;\n    let h = 0;\n    Object.keys(data).map(key => {\n      if (data[key].rating > h) {\n        h = data[key].rating;\n      }\n    });\n    return h + 10; //To give some margin between the highest rating and the top of the chart.\n  };\n\n  render() {\n    const data = this.props.data;\n    const leftPadding = 50;\n    const topPadding = 10;\n    const bottomPadding = 20;\n\n    const width = this.props.width - leftPadding;\n\n    const height = this.props.height;\n    const drawingHeight = height - topPadding - bottomPadding;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    }\n\n    // highest bar should fill up the barchart height. All bars should be scaled\n    const scale = height / maxHeightCalc();\n    // x posiiton of the bar\n    const xPos = width / Object.keys(data).length;\n    // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n    const barWidth =\n      2 *\n      (width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n\n    return (\n      <Stage width={this.props.width} height={this.props.height}>\n        <Layer>\n          {this.renderBackground(height, width, leftPadding)}\n\n          {this.renderYAxisTickMarks(leftPadding, height)}\n\n          {/* Bars */}\n          {Object.keys(data).map((key, index) => (\n            <ColoredRect\n              key={key}\n              xPos={xPos * index + leftPadding}\n              yPos={height - scale * data[key].value}\n              height={scale * data[key].value}\n              width={barWidth}\n              value={data[key].value}\n              chartHeight={height} // used for labels\n              color={this.props.theme.barcols[0]}\n            />\n          ))}\n\n          <Line\n            // horisontal x axis\n            points={[leftPadding, height, this.props.width, height]}\n            stroke={\"black\"}\n            strokeWidth={1}\n            tension={1}\n          />\n\n          <Line\n            // vertical Y axis\n            // [x1, y1, x2, y2, x3, y3]\n            points={[leftPadding, 0, leftPadding, height]}\n            stroke={\"black\"}\n            strokeWidth={1}\n            tension={1}\n          />\n\n          <Text\n            text={this.firstLetterToUpper(this.props.yAxis)}\n            x={18}\n            y={height / 2 - 20}\n            fontSize={15}\n            rotation={90}\n          />\n\n          <Text\n            text={this.firstLetterToUpper(this.props.xAxis)}\n            x={(width + leftPadding) / 2 - 20}\n            y={height - 17}\n            fontSize={15}\n          />\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default Barchart;\n"]},"metadata":{},"sourceType":"module"}