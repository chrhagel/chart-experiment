{"ast":null,"code":"var _jsxFileName = \"/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js\";\nimport React from \"react\";\nimport { Stage, Layer, Line } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderYaxisTicks = (gutter, height, ticks) => {\n      ticks.map(val => {\n        return React.createElement(Line // horisontal x axis\n        , {\n          points: [gutter, height, this.props.width, height],\n          stroke: \"black\",\n          strokeWidth: 1,\n          tension: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          },\n          __self: this\n        });\n      });\n    };\n  }\n\n  render() {\n    const data = this.props.data;\n    const gutter = 20;\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    } // highest bar should fill up the barchart height. All bars should be scaled\n\n\n    const scale = height / maxHeightCalc(); // x posiiton of the bar\n\n    const xPos = width / Object.keys(data).length; // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n\n    const barWidth = 2 * (width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n    return React.createElement(Stage, {\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, Object.keys(data).map((key, index) => React.createElement(ColoredRect, {\n      key: key,\n      xPos: xPos * index + gutter,\n      yPos: height - scale * data[key].value,\n      height: scale * data[key].value,\n      width: barWidth,\n      value: data[key].value,\n      chartHeight: height // used for labels\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    })), React.createElement(Line // horisontal x axis\n    , {\n      points: [gutter, height, this.props.width, height],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(Line // vertical Y axis\n    // [x1, y1, x2, y2, x3, y3]\n    , {\n      points: [gutter, 0, gutter, height],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Barchart;","map":{"version":3,"sources":["/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js"],"names":["React","Stage","Layer","Line","Konva","ColoredRect","Barchart","Component","renderYaxisTicks","gutter","height","ticks","map","val","props","width","render","data","maxHeightCalc","h","Object","keys","key","value","scale","xPos","length","barWidth","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Stage, Layer, Line } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  renderYaxisTicks = (gutter, height, ticks) => {\n    ticks.map(val => {\n      return (\n        <Line\n          // horisontal x axis\n          points={[gutter, height, this.props.width, height]}\n          stroke={\"black\"}\n          strokeWidth={1}\n          tension={1}\n        />\n      );\n    });\n  };\n\n  render() {\n    const data = this.props.data;\n    const gutter = 20;\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    }\n\n    // highest bar should fill up the barchart height. All bars should be scaled\n    const scale = height / maxHeightCalc();\n    // x posiiton of the bar\n    const xPos = width / Object.keys(data).length;\n    // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n    const barWidth =\n      2 *\n      (width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n\n    return (\n      <Stage width={this.props.width} height={this.props.height}>\n        <Layer>\n          {Object.keys(data).map((key, index) => (\n            <ColoredRect\n              key={key}\n              xPos={xPos * index + gutter}\n              yPos={height - scale * data[key].value}\n              height={scale * data[key].value}\n              width={barWidth}\n              value={data[key].value}\n              chartHeight={height} // used for labels\n            />\n          ))}\n          <Line\n            // horisontal x axis\n            points={[gutter, height, this.props.width, height]}\n            stroke={\"black\"}\n            strokeWidth={1}\n            tension={1}\n          />\n          <Line\n            // vertical Y axis\n            // [x1, y1, x2, y2, x3, y3]\n            points={[gutter, 0, gutter, height]}\n            stroke={\"black\"}\n            strokeWidth={1}\n            tension={1}\n          />\n        </Layer>\n        {/* {this.renderYaxisTicks(gutter, height, [10, 20])}; */}\n      </Stage>\n    );\n  }\n}\n\nexport default Barchart;\n"]},"metadata":{},"sourceType":"module"}