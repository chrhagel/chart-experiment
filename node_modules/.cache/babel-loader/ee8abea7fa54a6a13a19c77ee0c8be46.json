{"ast":null,"code":"var _jsxFileName = \"/Users/christian/Documents/git/chart-experiment/src/components/Scatterplot.js\";\nimport React from \"react\";\nimport { Stage, Layer, Rect, Line, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport Plotmark from \"./Plotmark\";\n\nclass Scatterplot extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderBackground = (height, width, leftPadding) => {\n      return React.createElement(Rect, {\n        x: 0,\n        y: 0,\n        width: width + leftPadding,\n        height: height,\n        fill: this.props.theme.bgcol,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      });\n    };\n\n    this.renderYAxisTickMarks = (leftPadding, height, topPadding, hScale) => {\n      if (this.props.theme.showYTicks) {\n        const numYMarks = 11;\n        const yAxisTickDistance = this.maxHeightCalc() / numYMarks + 1; // so we dont start at the x axis.\n\n        var arr = [];\n\n        for (var i = 0; i < numYMarks; i++) {\n          const yPostition = height - yAxisTickDistance * i * hScale + 2;\n          arr.push(React.createElement(Line, {\n            key: \"mark\" + i,\n            points: [leftPadding, yPostition, this.props.width + 3, yPostition],\n            stroke: this.props.theme.col,\n            strokeWidth: 1,\n            tension: 1,\n            dash: [4],\n            onClick: this.handleLineClick // NOT WORKING\n            ,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 28\n            },\n            __self: this\n          }));\n        }\n\n        return arr;\n      } else return null;\n    };\n\n    this.renderYAxis = (leftPadding, height, topPadding, yDomainMax) => {\n      if (this.props.theme.showYAxis) {\n        const numYMarks = 11; // so we have a baseline for 0 and a tick for each 10.\n\n        const domainTicks = parseInt(yDomainMax / (numYMarks - 1));\n        const yAxisTickDistance = height / numYMarks + 1; // so we dont start at the x axis.\n\n        var arr = [];\n\n        for (var i = 0; i < numYMarks; i++) {\n          arr.push(React.createElement(Text, {\n            key: \"text\" + i,\n            text: domainTicks * (numYMarks - (i + 1)),\n            x: 28,\n            y: yAxisTickDistance * i - 5 + topPadding,\n            fontSize: 12,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52\n            },\n            __self: this\n          }));\n        }\n\n        return arr;\n      } else return null;\n    };\n\n    this.maxHeightCalc = () => {\n      const data = this.props.data;\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].rating > h) {\n          h = data[key].rating;\n        }\n      });\n      return h + 10; //To give some margin between the highest rating and the top of the chart.\n    };\n\n    this.maxWidthCalc = () => {\n      const data = this.props.data;\n      let w = 0;\n      Object.keys(data).map(key => {\n        if (data[key].years > w) {\n          w = data[key].years;\n        }\n      });\n      return w;\n    };\n  }\n\n  render() {\n    const data = this.props.data;\n    const leftPadding = 50;\n    const topPadding = 10;\n    const bottomPadding = 17;\n    const width = this.props.width - leftPadding;\n    const height = this.props.height - leftPadding; // highest bar should fill up the barchart height. All bars should be scaled\n\n    const hScale = height / this.maxHeightCalc();\n    const wScale = (width - leftPadding) / this.maxWidthCalc();\n    return React.createElement(Stage, {\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, this.renderBackground(height, width, leftPadding), this.renderYAxisTickMarks(leftPadding, height, topPadding, hScale), this.renderYAxis(leftPadding, height - bottomPadding, topPadding, this.maxHeightCalc()), Object.keys(data).map((key, index) => React.createElement(Plotmark, {\n      key: key,\n      xPos: leftPadding + data[key].years * wScale // yPos={(height - (topPadding  + 0 )) - data[key].rating * (hScale)}\n      ,\n      yPos: height - data[key].rating * hScale,\n      radius: 5,\n      color: this.props.theme.barcols[0],\n      value: data[key].name + \"--- Rating: \" + data[key].rating + \" and \" + \"Years: \" + data[key].years,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })), React.createElement(Text, {\n      text: \"Rating\",\n      x: 18,\n      y: height / 2 - 20,\n      fontSize: 15,\n      rotation: 90,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(Text, {\n      text: \"Years\",\n      x: width / 2 - 20,\n      y: height - 17,\n      fontSize: 15,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Scatterplot;","map":{"version":3,"sources":["/Users/christian/Documents/git/chart-experiment/src/components/Scatterplot.js"],"names":["React","Stage","Layer","Rect","Line","Text","Konva","Plotmark","Scatterplot","Component","renderBackground","height","width","leftPadding","props","theme","bgcol","renderYAxisTickMarks","topPadding","hScale","showYTicks","numYMarks","yAxisTickDistance","maxHeightCalc","arr","i","yPostition","push","col","handleLineClick","renderYAxis","yDomainMax","showYAxis","domainTicks","parseInt","data","h","Object","keys","map","key","rating","maxWidthCalc","w","years","render","bottomPadding","wScale","index","barcols","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Stage, Layer, Rect, Line, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport Plotmark from \"./Plotmark\";\n\nclass Scatterplot extends React.Component {\n  renderBackground = (height, width, leftPadding) => {\n    return (\n      <Rect\n        x={0}\n        y={0}\n        width={width + leftPadding}\n        height={height}\n        fill={this.props.theme.bgcol}\n      />\n    );\n  };\n\n  renderYAxisTickMarks = (leftPadding, height, topPadding, hScale) => {\n    if (this.props.theme.showYTicks) {\n      const numYMarks = 11;\n\n      const yAxisTickDistance = this.maxHeightCalc() / numYMarks + 1; // so we dont start at the x axis.\n      var arr = [];\n      for (var i = 0; i < numYMarks; i++) {\n        const yPostition = height - yAxisTickDistance * i * hScale + 2;\n        arr.push(\n          <Line\n            key={\"mark\" + i}\n            points={[leftPadding, yPostition, this.props.width + 3, yPostition]}\n            stroke={this.props.theme.col}\n            strokeWidth={1}\n            tension={1}\n            dash={[4]}\n            onClick={this.handleLineClick} // NOT WORKING\n          />\n        );\n      }\n      return arr;\n    } else return null;\n  };\n\n  // yDomainMax = highest value.\n  renderYAxis = (leftPadding, height, topPadding, yDomainMax) => {\n    if (this.props.theme.showYAxis) {\n      const numYMarks = 11; // so we have a baseline for 0 and a tick for each 10.\n      const domainTicks = parseInt(yDomainMax / (numYMarks - 1));\n      const yAxisTickDistance = height / numYMarks + 1; // so we dont start at the x axis.\n      var arr = [];\n      for (var i = 0; i < numYMarks; i++) {\n        arr.push(\n          <Text\n            key={\"text\" + i}\n            text={domainTicks * (numYMarks - (i + 1))}\n            x={28}\n            y={yAxisTickDistance * i - 5 + topPadding}\n            fontSize={12}\n          />\n        );\n      }\n      return arr;\n    } else return null;\n  };\n\n  maxHeightCalc = () => {\n    const data = this.props.data;\n    let h = 0;\n    Object.keys(data).map(key => {\n      if (data[key].rating > h) {\n        h = data[key].rating;\n      }\n    });\n    return h + 10; //To give some margin between the highest rating and the top of the chart.\n  };\n\n  maxWidthCalc = () => {\n    const data = this.props.data;\n    let w = 0;\n    Object.keys(data).map(key => {\n      if (data[key].years > w) {\n        w = data[key].years;\n      }\n    });\n    return w;\n  };\n\n  render() {\n    const data = this.props.data;\n    const leftPadding = 50;\n    const topPadding = 10;\n    const bottomPadding = 17;\n\n    const width = this.props.width - leftPadding;\n    const height = this.props.height - leftPadding;\n\n    // highest bar should fill up the barchart height. All bars should be scaled\n    const hScale = height / this.maxHeightCalc();\n    const wScale = (width - leftPadding) / this.maxWidthCalc();\n\n    return (\n      <Stage width={this.props.width} height={this.props.height}>\n        <Layer>\n          {this.renderBackground(height, width, leftPadding)}\n          {this.renderYAxisTickMarks(leftPadding, height, topPadding, hScale)}\n          {this.renderYAxis(\n            leftPadding,\n            height - bottomPadding,\n            topPadding,\n            this.maxHeightCalc()\n          )}\n\n          {/* plot marks */}\n          {Object.keys(data).map((key, index) => (\n            <Plotmark\n              key={key}\n              xPos={leftPadding + data[key].years * wScale}\n              // yPos={(height - (topPadding  + 0 )) - data[key].rating * (hScale)}\n              yPos={height - data[key].rating * hScale}\n              radius={5}\n              color={this.props.theme.barcols[0]}\n              value={\n                data[key].name +\n                \"--- Rating: \" +\n                data[key].rating +\n                \" and \" +\n                \"Years: \" +\n                data[key].years\n              }\n            />\n          ))}\n\n          <Text\n            text={\"Rating\"}\n            x={18}\n            y={height / 2 - 20}\n            fontSize={15}\n            rotation={90}\n          />\n\n          <Text\n            text={\"Years\"}\n            x={width / 2 - 20}\n            y={height - 17}\n            fontSize={15}\n          />\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default Scatterplot;\n"]},"metadata":{},"sourceType":"module"}