{"ast":null,"code":"var _jsxFileName = \"/Users/chagelsorensen/Documents/react/chart-experiment/src/components/Scatterplot.js\";\nimport React from \"react\";\nimport { Stage, Layer, Rect, Line } from \"react-konva\";\nimport Konva from \"konva\";\nimport Plotmark from \"./Plotmark\";\n\nclass Scatterplot extends React.Component {\n  render() {\n    const data = this.props.data;\n    let gutter = 0;\n\n    if (this.props.theme.showYTicks) {\n      gutter = 10;\n    }\n\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].rating > h) {\n          h = data[key].rating;\n        }\n      });\n      return h;\n    }\n\n    function maxWidthCalc() {\n      let w = 0;\n      Object.keys(data).map(key => {\n        if (data[key].years > w) {\n          w = data[key].years;\n        }\n      });\n      return w;\n    } // highest bar should fill up the barchart height. All bars should be scaled\n\n\n    const hScale = height / maxHeightCalc();\n    const wScale = width / maxWidthCalc();\n    return React.createElement(Stage, {\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, Object.keys(data).map((key, index) => React.createElement(Plotmark, {\n      key: key,\n      xPos: data[key].year * wScale,\n      yPos: data[key].rating * hScale,\n      radius: 10,\n      color: this.props.theme.barcols[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Scatterplot;","map":{"version":3,"sources":["/Users/chagelsorensen/Documents/react/chart-experiment/src/components/Scatterplot.js"],"names":["React","Stage","Layer","Rect","Line","Konva","Plotmark","Scatterplot","Component","render","data","props","gutter","theme","showYTicks","width","height","maxHeightCalc","h","Object","keys","map","key","rating","maxWidthCalc","w","years","hScale","wScale","index","year","barcols"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,IAA7B,QAAyC,aAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,WAAN,SAA0BP,KAAK,CAACQ,SAAhC,CAA0C;AACxCC,EAAAA,MAAM,GAAG;AACP,UAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWD,IAAxB;AACA,QAAIE,MAAM,GAAG,CAAb;;AACA,QAAI,KAAKD,KAAL,CAAWE,KAAX,CAAiBC,UAArB,EAAiC;AAC/BF,MAAAA,MAAM,GAAG,EAAT;AACD;;AAED,UAAMG,KAAK,GAAG,KAAKJ,KAAL,CAAWI,KAAX,GAAmBH,MAAjC;AACA,UAAMI,MAAM,GAAG,KAAKL,KAAL,CAAWK,MAAX,GAAoBJ,MAAnC;;AAEA,aAASK,aAAT,GAAyB;AACvB,UAAIC,CAAC,GAAG,CAAR;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAYV,IAAZ,EAAkBW,GAAlB,CAAsBC,GAAG,IAAI;AAC3B,YAAIZ,IAAI,CAACY,GAAD,CAAJ,CAAUC,MAAV,GAAmBL,CAAvB,EAA0B;AACxBA,UAAAA,CAAC,GAAGR,IAAI,CAACY,GAAD,CAAJ,CAAUC,MAAd;AACD;AACF,OAJD;AAKA,aAAOL,CAAP;AACD;;AAED,aAASM,YAAT,GAAwB;AACtB,UAAIC,CAAC,GAAG,CAAR;AACAN,MAAAA,MAAM,CAACC,IAAP,CAAYV,IAAZ,EAAkBW,GAAlB,CAAsBC,GAAG,IAAI;AAC3B,YAAIZ,IAAI,CAACY,GAAD,CAAJ,CAAUI,KAAV,GAAkBD,CAAtB,EAAyB;AACvBA,UAAAA,CAAC,GAAGf,IAAI,CAACY,GAAD,CAAJ,CAAUI,KAAd;AACD;AACF,OAJD;AAKA,aAAOD,CAAP;AACD,KA5BM,CA8BP;;;AACA,UAAME,MAAM,GAAGX,MAAM,GAAGC,aAAa,EAArC;AACA,UAAMW,MAAM,GAAGb,KAAK,GAAGS,YAAY,EAAnC;AAEA,WACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,KAAKb,KAAL,CAAWI,KAAzB;AAAgC,MAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWK,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEGG,MAAM,CAACC,IAAP,CAAYV,IAAZ,EAAkBW,GAAlB,CAAsB,CAACC,GAAD,EAAMO,KAAN,KACrB,oBAAC,QAAD;AACE,MAAA,GAAG,EAAEP,GADP;AAEE,MAAA,IAAI,EAAEZ,IAAI,CAACY,GAAD,CAAJ,CAAUQ,IAAV,GAAiBF,MAFzB;AAGE,MAAA,IAAI,EAAElB,IAAI,CAACY,GAAD,CAAJ,CAAUC,MAAV,GAAmBI,MAH3B;AAIE,MAAA,MAAM,EAAE,EAJV;AAKE,MAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWE,KAAX,CAAiBkB,OAAjB,CAAyB,CAAzB,CALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CAFH,CADF,CADF;AAgBD;;AAnDuC;;AAsD1C,eAAexB,WAAf","sourcesContent":["import React from \"react\";\nimport { Stage, Layer, Rect, Line } from \"react-konva\";\nimport Konva from \"konva\";\nimport Plotmark from \"./Plotmark\";\n\nclass Scatterplot extends React.Component {\n  render() {\n    const data = this.props.data;\n    let gutter = 0;\n    if (this.props.theme.showYTicks) {\n      gutter = 10;\n    }\n\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].rating > h) {\n          h = data[key].rating;\n        }\n      });\n      return h;\n    }\n\n    function maxWidthCalc() {\n      let w = 0;\n      Object.keys(data).map(key => {\n        if (data[key].years > w) {\n          w = data[key].years;\n        }\n      });\n      return w;\n    }\n\n    // highest bar should fill up the barchart height. All bars should be scaled\n    const hScale = height / maxHeightCalc();\n    const wScale = width / maxWidthCalc();\n\n    return (\n      <Stage width={this.props.width} height={this.props.height}>\n        <Layer>\n          {/* Bars */}\n          {Object.keys(data).map((key, index) => (\n            <Plotmark\n              key={key}\n              xPos={data[key].year * wScale}\n              yPos={data[key].rating * hScale}\n              radius={10}\n              color={this.props.theme.barcols[0]}\n            />\n          ))}\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default Scatterplot;\n"]},"metadata":{},"sourceType":"module"}