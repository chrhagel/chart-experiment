{"ast":null,"code":"var _jsxFileName = \"/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js\";\nimport React from \"react\";\nimport { Stage, Layer, Line } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  render() {\n    const data = this.props.data;\n    const gutter = 10;\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    } // highest bar should fill up the barchart height. All bars should be scaled\n\n\n    const scale = height / maxHeightCalc(); // x posiiton of the bar\n\n    const xPos = width / Object.keys(data).length; // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n\n    const barWidth = 2 * (width / (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n    return React.createElement(Stage, {\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, Object.keys(data).map((key, index) => React.createElement(ColoredRect, {\n      key: key,\n      xPos: xPos * index + gutter,\n      yPos: height - scale * data[key].value,\n      height: scale * data[key].value,\n      width: barWidth,\n      value: data[key].value,\n      chartHeight: this.props.height // used for labels\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    })), React.createElement(Line, {\n      points: [gutter, height, width, height],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(Line // [x1, y1, x2, y2, x3, y3]\n    , {\n      points: [gutter, gutter, gutter, height],\n      stroke: \"black\",\n      strokeWidth: 1,\n      tension: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Barchart;","map":{"version":3,"sources":["/Users/christian/Dropbox/Code_courses/trying_react/chs-01/src/components/Barchart.js"],"names":["React","Stage","Layer","Line","Konva","ColoredRect","Barchart","Component","render","data","props","gutter","width","height","maxHeightCalc","h","Object","keys","map","key","value","scale","xPos","length","barWidth","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Stage, Layer, Line } from \"react-konva\";\nimport Konva from \"konva\";\nimport ColoredRect from \"./ColoredRect\";\n\nclass Barchart extends React.Component {\n  render() {\n    const data = this.props.data;\n    const gutter = 10;\n    const width = this.props.width - gutter;\n    const height = this.props.height - gutter;\n\n    function maxHeightCalc() {\n      let h = 0;\n      Object.keys(data).map(key => {\n        if (data[key].value > h) {\n          h = data[key].value;\n        }\n      });\n      return h;\n    }\n\n    // highest bar should fill up the barchart height. All bars should be scaled\n    const scale = height / maxHeightCalc();\n    // x posiiton of the bar\n    const xPos = width / Object.keys(data).length;\n    // space between bars should be 1/2 the width of bars.\n    // 4 bars = 3 spaces. -> 4 + 4 + 3 = 11. Width /11 = each space. And a bar is twice that.\n    const barWidth =\n      2 *\n      (width /\n        (Object.keys(data).length * 2 + (Object.keys(data).length - 1)));\n\n    return (\n      <Stage width={this.props.width} height={this.props.height}>\n        <Layer>\n          {Object.keys(data).map((key, index) => (\n            <ColoredRect\n              key={key}\n              xPos={(xPos * index) + gutter}\n              yPos={height - scale * data[key].value}\n              height={scale * data[key].value}\n              width={barWidth}\n              value={data[key].value}\n              chartHeight={this.props.height} // used for labels\n            />\n          ))}\n          <Line\n            points={[gutter, height, width, height]}\n            stroke={\"black\"}\n            strokeWidth={1}\n            tension={1}\n          />\n          <Line\n          // [x1, y1, x2, y2, x3, y3]\n            points={[gutter, gutter, gutter, height]}\n            stroke={\"black\"}\n            strokeWidth={1}\n            tension={1}\n          />\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default Barchart;\n"]},"metadata":{},"sourceType":"module"}